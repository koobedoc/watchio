{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Watchio WatchIO - Python package to watch process IO. The watchio package provides utilities to watch for IO activities of Unix processes. It works by reading the Unix process information file /proc/{pid}/io periodically. You can only use it on a system where /proc is mounted, and for processes that you have tracing access to. An example use case is a microserver displaying static web pages created by a separate program that takes a moderate amount of resources. A sensible implementation updates the static pages only when users are viewing the results. The watchio module helps to watch for IO activities of the server when the server has no other convenient indications of activities (such as saving accesses to a log file). Install the package from pypi.org by pip install watchio Usage In a polling loop in Python code: watcher = watchio . WatchIO ([ 123 , 456 ]) ## Use in a polling loop to update static web pages ## poll() will return an integer ## -1: every 600 seconds, or ## >0: there are IO activities (checked every 10 seconds) while True : if watcher . poll ( timeout = 600 , step = 10 ): ## main work .... On the Unix command line watchio poll 1234 vim --timeout 600 --step 10 ./update_script.csh Only processes owned by you are allowed. You can supply a process name instead of a numerical process ID and watchio will look up all processes owned by you having that name. See Also Unix /proc file system man page iostat man page Code on github: https://github.com/koobedoc/watchio Package on PyPI: https://pypi.org/project/watchio/ Online documentation: https://koobedoc.github.io/watchio/ Project Information python-depends: psutil docs: mkdocs python-modules: watchio python-packages: watchio","title":"Watchio"},{"location":"#watchio","text":"WatchIO - Python package to watch process IO. The watchio package provides utilities to watch for IO activities of Unix processes. It works by reading the Unix process information file /proc/{pid}/io periodically. You can only use it on a system where /proc is mounted, and for processes that you have tracing access to. An example use case is a microserver displaying static web pages created by a separate program that takes a moderate amount of resources. A sensible implementation updates the static pages only when users are viewing the results. The watchio module helps to watch for IO activities of the server when the server has no other convenient indications of activities (such as saving accesses to a log file). Install the package from pypi.org by pip install watchio","title":"Watchio"},{"location":"#usage","text":"In a polling loop in Python code: watcher = watchio . WatchIO ([ 123 , 456 ]) ## Use in a polling loop to update static web pages ## poll() will return an integer ## -1: every 600 seconds, or ## >0: there are IO activities (checked every 10 seconds) while True : if watcher . poll ( timeout = 600 , step = 10 ): ## main work .... On the Unix command line watchio poll 1234 vim --timeout 600 --step 10 ./update_script.csh Only processes owned by you are allowed. You can supply a process name instead of a numerical process ID and watchio will look up all processes owned by you having that name.","title":"Usage"},{"location":"#see-also","text":"Unix /proc file system man page iostat man page Code on github: https://github.com/koobedoc/watchio Package on PyPI: https://pypi.org/project/watchio/ Online documentation: https://koobedoc.github.io/watchio/","title":"See Also"},{"location":"#project-information","text":"python-depends: psutil docs: mkdocs python-modules: watchio python-packages: watchio","title":"Project Information"},{"location":"api___init__/","text":"API watchio h4.class-method + dl { /* Indent dl following class-method */ margin-left: 2em; margin-top: -1em; } h4.class-method { margin-left: 2em; } h4.class-method .highlight { font-weight: normal; } class WatchIO Process IO watcher. __init__ ( self , pids : list = None , * , timeout : float = 600 , step : float = 1 , check = False ) Constructor for WatchIO, call with keyword arguments. pids is a list of process PIDs to watch. Non-valid PIDs are silently ignored unless check is enabled. timeout sets the default timeout value for the poll() method. step sets the default step value, the interval we check the /proc/{pid}/io file, in seconds for the poll() method. check raises exceptions (PermissionError if not accessible or FileNotFoundError for non-existent process) instead of silently ignoring bad pids by default. find_pids ( self , name : str ) -> list Get a list of PIDs by name . Name can be a numerical pid or the name of the process. Returns a (possibly empty) list. get_io_data ( self , pid : int ) -> dict Get IO data of the pid process. The method reads and parses the file \"/proc/{pid}/io\" and returns a dictionary with values in int. See https://www.kernel.org/doc/html/latest/filesystems/proc.html#proc-pid-io-display-the-io-accounting-fields for a description of the fields. pid is the process ID to get the io data. The method returns None if the process does not exist. TODO: no read access. main_cli () Unix command line interface parse_cli ( self ) Parse Unix command line arguments poll ( self , timeout : float = None , step : float = None , clear = False ) -> int Poll the IO activities. The method checks for IO activities every step seconds. It returns the number of processes with new IO activities since the last update() or poll(); or returns 0 if the wait time has exceeded timeout seconds. timeout defaults to instance value if not given. step defaults to instance value if not given. clear (default is False) clears the IO counters so that polling uses only IO activities after this function has started. update ( self ) -> int Update IO activities. Returns the number of process with new IO activities since the last update() or poll(). Returns -1 if no PID is valid.","title":"API watchio"},{"location":"api___init__/#api-watchio","text":"h4.class-method + dl { /* Indent dl following class-method */ margin-left: 2em; margin-top: -1em; } h4.class-method { margin-left: 2em; } h4.class-method .highlight { font-weight: normal; }","title":"API watchio"},{"location":"api___init__/#class-watchio","text":"Process IO watcher.","title":"class WatchIO"},{"location":"api___init__/#__init__-self-pids-list-none-timeout-float-600-step-float-1-checkfalse","text":"Constructor for WatchIO, call with keyword arguments. pids is a list of process PIDs to watch. Non-valid PIDs are silently ignored unless check is enabled. timeout sets the default timeout value for the poll() method. step sets the default step value, the interval we check the /proc/{pid}/io file, in seconds for the poll() method. check raises exceptions (PermissionError if not accessible or FileNotFoundError for non-existent process) instead of silently ignoring bad pids by default.","title":"__init__"},{"location":"api___init__/#find_pids-self-name-str-list","text":"Get a list of PIDs by name . Name can be a numerical pid or the name of the process. Returns a (possibly empty) list.","title":"find_pids"},{"location":"api___init__/#get_io_data-self-pid-int-dict","text":"Get IO data of the pid process. The method reads and parses the file \"/proc/{pid}/io\" and returns a dictionary with values in int. See https://www.kernel.org/doc/html/latest/filesystems/proc.html#proc-pid-io-display-the-io-accounting-fields for a description of the fields. pid is the process ID to get the io data. The method returns None if the process does not exist. TODO: no read access.","title":"get_io_data"},{"location":"api___init__/#main_cli","text":"Unix command line interface","title":"main_cli"},{"location":"api___init__/#parse_cli-self","text":"Parse Unix command line arguments","title":"parse_cli"},{"location":"api___init__/#poll-self-timeout-float-none-step-float-none-clearfalse-int","text":"Poll the IO activities. The method checks for IO activities every step seconds. It returns the number of processes with new IO activities since the last update() or poll(); or returns 0 if the wait time has exceeded timeout seconds. timeout defaults to instance value if not given. step defaults to instance value if not given. clear (default is False) clears the IO counters so that polling uses only IO activities after this function has started.","title":"poll"},{"location":"api___init__/#update-self-int","text":"Update IO activities. Returns the number of process with new IO activities since the last update() or poll(). Returns -1 if no PID is valid.","title":"update"}]}